<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes.viphat.work</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://notes.viphat.work/</link>
    <atom:link href="http://notes.viphat.work/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Jun 2016 15:15:09 +0000</pubDate>
    <lastBuildDate>Fri, 24 Jun 2016 15:15:09 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Vọc thử Vagrant</title>
        <description>&lt;h3 id=&quot;vc-th-vagrant&quot;&gt;Vọc thử Vagrant&lt;/h3&gt;

&lt;p&gt;Số là vừa dọn dẹp sạch sẽ ổ cứng và reinstall lại OS cho con Macbook của mình, mà hễ cứ cài lại máy là y như rằng phải setup lại một đống thứ, đặc biệt là môi trường để dev (mình sử dụng Ruby 2.3, Rails, Redis, Postgres 9,4, Node.js…), rất oải. Chưa kể nếu làm việc trong một team, cần một môi trường lập trình đồng nhất để hạn chế lỗi hay sự bất đồng bộ có thể xảy ra thì việc thiết lập các máy tính của mỗi thành viên trong team một cách thủ công là hết sức tốn kém về mặt thời gian. Vagrant ra đời là để giải quyết vấn đề đó. Vagrant build on top các virtual machine như Virtual Box, VMWare… Vagrant còn kết hợp tốt với các provision tools như Puppet, Chef, Ansible để tự động cài đặt và cấu hình các phần mềm, công cụ cần thiết trên máy ảo. Nhờ Vagrant mà chúng ta có thể xây dựng một môi trường giả lập một cách nhanh chóng, tiện dụng, hiệu quả và có thể chia sẻ để dùng chung cho cả team.&lt;/p&gt;

&lt;p&gt;Cài đặt Vagrant hết sức đơn giản, vào trang &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt; và tải về phiên bản dành cho hệ điều hành của mình (Trước đó, bạn cần cài đặt phần mềm Virtual Machine trước đã, mình khuyến nghị dùng VirtualBox). Lựa một boxes mà mình cần dùng làm nền tảng tại &lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;, thường các boxes được chia sẻ và có nhiều lượt sử dụng chỉ bao gồm hệ điều hành và một số tinh chỉnh nhỏ để mọi người có thể tuỳ biến dựa theo nhu cầu của mình. Ở đây mình chọn ubuntu/trusty64 (Official UBuntu 14.04 LTS), cũng có nhiều boxes cài sẵn PHP, Apache, Nginx, MySQL, WordPress này nọ nhưng mình không cần lắm.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init hashicorp/precise64
vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lần đầu tiên chạy Vagrant up sẽ khá lâu, vì Vagrant sẽ tải box, hệ điều hành về, cài đặt và tuỳ chỉnh cho bạn. Những lần sau thì bạn cứ &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; rồi &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; là sử dụng bình thường, thậm chí có thể quên luôn sự tồn tại của VirtualBox. Khi dùng chán chê rồi thì &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant destroy&lt;/code&gt; hoặc &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant halt&lt;/code&gt; để tắt VM và giải pháp tài nguyên hệ thống mà vagrant chiếm giữ (Máy mình khi start box Ubuntu của vagrant vẫn chạy vi vu, không thấy ảnh hưởng gì nhiều nên cũng không phải destroy luôn.).  Để xoá hẳn một box không dùng nữa thì ta xài lệnh &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant box remove&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ngoài ra, còn một số lệnh thường dùng như:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant box update&lt;/code&gt; để cập nhật một box (nếu có phiên bản mới)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant reload&lt;/code&gt; để reload cấu hình của vagrant box hiện tại - Cấu hình được lưu trong file &lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;synced-folders&quot;&gt;Synced Folders&lt;/h4&gt;

&lt;p&gt;Một chức năng quan trọng trong Vagrant, theo mình nghĩ Vagrant chỉ nên dùng để cài đặt các phần mềm, công cụ tối cần thiết để dùng chung cho cả team. Mỗi người đều có IDE/Editor ưa thích, tốt hơn là nên để IDE/Editor nằm ngoài VM và dùng chức năng Synced Folders để đồng bộ hoá folder chứa code.&lt;/p&gt;

&lt;p&gt;Đọc thêm cách sử dụng của Synced Folders tại &lt;a href=&quot;https://www.vagrantup.com/docs/synced-folders/basic_usage.html&quot;&gt;đây&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cơ bản là chúng ta sẽ thêm Synced Folders (bao nhiêu tuỳ thích) vào Vagrantfile theo cấu trúc sau:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.vm.synced_folder &quot;/path/on/host&quot;, &quot;/path/on/guest&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(Với host là máy thật, còn guest là máy ảo chạy vagrant)&lt;/p&gt;

&lt;h4 id=&quot;provisioning&quot;&gt;Provisioning&lt;/h4&gt;

&lt;p&gt;Ở thời điểm này thì mình chưa dùng tới chức năng &lt;strong&gt;Provisioning&lt;/strong&gt; do vẫn còn xa lạ với các provisioner như Puppet, Chef, Ansible. Thay vào đó sau khi khởi chạy một box của Vagrant, mình lại vào trong guest, cài đặt và cấu hình một cách thủ công. Automate hoàn toàn quá trình cài đặt phần mềm trong máy ảo lại là chức năng quan trọng và nổi bật nhất của Vagrant. Và đây chính là phần khó nhất và gây đau đầu nhất của Vagrant (Có thời gian mình sẽ thử tìm hiểu thêm về &lt;strong&gt;Chef&lt;/strong&gt; hoặc &lt;strong&gt;Ansible&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vagrantup.com/docs/provisioning/basic_usage.html&quot;&gt;Basic Usage&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;forwarded-port&quot;&gt;Forwarded Port&lt;/h4&gt;

&lt;p&gt;Để máy host có thể connect tới dịch vụ đang chạy trên máy guest, bạn phải cấu hình forwarded port trong file Vagrantfile, ví dụ của mình là forward cổng 3000 (Rails), 5432 (Postgres) và 6379 (Redis) để có thể truy cập vào localhost trên máy host bằng trình duyệt web.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.vm.network &quot;forwarded_port&quot;, guest: 3000, host: 3000
config.vm.network &quot;forwarded_port&quot;, guest: 5432, host: 5432
config.vm.network &quot;forwarded_port&quot;, guest: 6379, host: 6379
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;c-thm&quot;&gt;Đọc thêm&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://kipalog.com/posts/Toi-da-tu-bo-su-dung-Vagrant&quot;&gt;&lt;strong&gt;Tôi đã từ bỏ sử dụng Vagrant&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/voc-thu-vagrant</link>
        <guid isPermaLink="true">http://notes.viphat.work/voc-thu-vagrant</guid>
        
        <category>vagrant</category>
        
        
      </item>
    
      <item>
        <title>[Ruby] - Tổng hợp về Roda web toolkit</title>
        <description>&lt;p&gt;Vậy là cũng gần 2 năm kể từ khi mình trở lại với con đường Coder - &lt;a href=&quot;http://notes.viphat.work/toi-da-bat-dau-hoc-ruby-nhu-the-nao&quot;&gt;&lt;strong&gt;Tôi đã học Ruby như thế nào&lt;/strong&gt;&lt;/a&gt;. Và cũng ngần ấy thời gian, mình đã gắn bó với Ruby, ăn ngủ cùng Rails. Tuy nhiên, Ruby không chỉ có Rails, việc sử dụng Rails quá nhiều dẫn đến mình bị lệ thuộc vào Rails và các magic, monkey patching của Rails. Vì vậy, mình quyết định sẽ tìm hiểu thử các framework khác của Ruby và áp dụng cho các dự án &lt;a href=&quot;http://notes.viphat.work/moi-lap-trinh-vien-deu-can-co-it-nhat-mot-side-project&quot;&gt;side project&lt;/a&gt; sắp tới của mình.&lt;/p&gt;

&lt;p&gt;Ban đầu, mình định quay lại với Sinatra, dù gì thì trước kia, mình đã từng dùng Sinatra và ít ra đã đọc và follow hết quyển &lt;a href=&quot;https://www.sitepoint.com/store/jump-start-sinatra/&quot;&gt;&lt;strong&gt;Jump Start Sinatra&lt;/strong&gt;&lt;/a&gt; rồi. Sau đó, một số cái tên đã được thêm vào short list của mình như &lt;strong&gt;Hanami&lt;/strong&gt; (&lt;strong&gt;Lotus&lt;/strong&gt;), &lt;strong&gt;CUBA&lt;/strong&gt; và &lt;strong&gt;Roda&lt;/strong&gt;. Và mình đã chọn Roda bởi vì…&lt;/p&gt;

&lt;h3 id=&quot;gii-thiu&quot;&gt;Giới thiệu&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Roda đơn giản và siêu gọn nhẹ, nó không phải một framework đầy đủ và nặng nề như Rails (được phát triển bởi một người độc đoán như DHH). Nếu bạn cần một framework tốt nhưng không phải &lt;strong&gt;Rails&lt;/strong&gt; thì &lt;strong&gt;Hanami&lt;/strong&gt; khá là hứa hẹn. Bản thân tác giả Roda chỉ giới thiệu Roda là một &lt;strong&gt;Routing Tree Web Toolkit&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Đáng tin cậy.&lt;/li&gt;
  &lt;li&gt;Roda có khả năng mở rộng bằng cách sử dụng plugins. Tuy cộng đồng của Roda không đông đảo, nhưng vẫn có đủ các plugins cần thiết, kết hợp với hệ thống gems dành cho Ruby cũng đủ đáp ứng phần lớn các yêu cầu của bạn.&lt;/li&gt;
  &lt;li&gt;Hiệu suất tốt hơn hẳn Rails (dĩ nhiên rồi), và nhanh hơn 2.5X so với &lt;strong&gt;Sinatra&lt;/strong&gt; (Một framework cũng siêu nhẹ khác).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tham khảo bài viết &lt;a href=&quot;http://viphat.me/1UcgEvi&quot;&gt;Why Roda?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lin-kt-hu-ch&quot;&gt;Liên kết hữu ích&lt;/h3&gt;

&lt;h4 id=&quot;mt-s-lin-kt-ng-tham-kho-khc&quot;&gt;Một số liên kết đáng tham khảo khác:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1YrR45i&quot;&gt;Roda Conventions&lt;/a&gt; - Vào học cách tổ chức folder dự án như thế nào? (Áp dụng cho ứng dụng nhỏ/lớn).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roda.jeremyevans.net/documentation.html&quot;&gt;&lt;strong&gt;Roda Documents&lt;/strong&gt;&lt;/a&gt; - Tập hợp các tài liệu chính thức của Roda và các plugins có sẵn của Roda.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1PtTY2d&quot;&gt;Roda Skeleton with Sequel&lt;/a&gt; - application skeleton cho ứng dụng viết bằng Roda với &lt;a href=&quot;http://viphat.me/1VZmNu3&quot;&gt;&lt;strong&gt;Sequel&lt;/strong&gt;&lt;/a&gt; làm ORM.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1UUJtX4&quot;&gt;Roda-app&lt;/a&gt; - Cũng là một application skeleton nhưng chỉ thuần Roda.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1Op9wJB&quot;&gt;Develop API with Roda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1XXbl3W&quot;&gt;Setup and deploy Roda app from scratch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twin.github.io/introduction-to-roda/&quot;&gt;Introduction to Roda&lt;/a&gt; - Bạn có thể xem cách tác giả sử dụng Roda cho API, Web Sockets, Caching… như thế nào.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mrcook.uk/simple-roda-blog-tutorial&quot;&gt;Simple Roda Blog Tutorial&lt;/a&gt; - Tutorial hướng dẫn tạo một blog đơn giản bằng Roda, thích hợp cho các bạn chuộng học theo kiểu thực hành theo guide hướng dẫn.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ng-dng-opensource-vit-bng-roda&quot;&gt;Ứng dụng OpenSource viết bằng roda:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kontena/kontena/tree/master/server&quot;&gt;&lt;strong&gt;Kontana Server&lt;/strong&gt;&lt;/a&gt;, bài viết liên quan - &lt;a href=&quot;http://viphat.me/24QRguM&quot;&gt;Roda + Mutations + Jbuilder = Perfect fit for JSON API&lt;/a&gt; , mình học được nhiều thứ cũng như chôm chỉa được cách cấu hình, tổ chức thư mục dự án từ Kontana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trong quá trình phát triển ứng dụng, một phần không thể thiếu (nếu ứng dụng có tương tác với database) là ORM và Authentication. Với Roda, ORM tốt nhất là &lt;strong&gt;Sequel&lt;/strong&gt; và Authentication thích hợp nhất là &lt;a href=&quot;http://viphat.me/1Opa16p&quot;&gt;&lt;strong&gt;Rodauth&lt;/strong&gt;&lt;/a&gt;, bởi cả 2 gem này đều do tác giả của &lt;strong&gt;Roda&lt;/strong&gt; là Jeremy Evans phát triển và duy trì. Trong đó, Sequel được đánh giá là không thua kém so với &lt;strong&gt;ActiveRecord&lt;/strong&gt; quen thuộc của Rails (Nói về Performance thì Sequel ăn đứt ActiveRecord nhé - &lt;a href=&quot;http://viphat.me/1XXcgl7&quot;&gt;xem chi tiết&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;mt-s-lin-kt-hu-ch-khi-tm-hiu-v-sequel&quot;&gt;Một số liên kết hữu ích khi tìm hiểu vể Sequel:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/23aimxB&quot;&gt;&lt;strong&gt;Sequel cheat sheet&lt;/strong&gt;&lt;/a&gt; - Tra cứu nhanh một số cách sử dụng Sequel.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/24QRnGw&quot;&gt;&lt;strong&gt;Sequel for ActiveRecord users&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1twkZhm&quot;&gt;Ode to Sequel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1YrVqJL&quot;&gt;ActiveRecord is reinventing Sequel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1YrTgtx&quot;&gt;Why you should stop using ActiveRecord and start using Sequel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Khi còn dev app bằng Sinatra thì mình dùng DataMapper cho ORM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;cc-plugins-mnh--dng-cho-side-project-u-tin---worklog-assistanthttpviphatme1q4kbop---c-vit-bng-roda&quot;&gt;Các plugins mình đã dùng cho side project đầu tiên - &lt;a href=&quot;http://viphat.me/1Q4KboP&quot;&gt;Worklog Assistant&lt;/a&gt; - được viết bằng roda:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;render&lt;/li&gt;
  &lt;li&gt;environments&lt;/li&gt;
  &lt;li&gt;multi_route&lt;/li&gt;
  &lt;li&gt;mailer&lt;/li&gt;
  &lt;li&gt;json&lt;/li&gt;
  &lt;li&gt;all_verbs&lt;/li&gt;
  &lt;li&gt;default_headers&lt;/li&gt;
  &lt;li&gt;head&lt;/li&gt;
  &lt;li&gt;error_handler&lt;/li&gt;
  &lt;li&gt;Sequel Extensions Seed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Đọc thêm bài &lt;a href=&quot;http://viphat.me/1rq3Sf1&quot;&gt;&lt;strong&gt;The Plugin System of Sequel and Roda&lt;/strong&gt;&lt;/a&gt; để hiểu mô hình này so với các gem của Rails như thế nào.&lt;/p&gt;

&lt;h3 id=&quot;deploy&quot;&gt;Deploy&lt;/h3&gt;
&lt;p&gt;Có thể áp dụng các tutorial deploy dành cho sinatra, bởi vì roda cũng giống sinatra, cũng thuộc dạng Rack-based.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1Uzmu47&quot;&gt;Sinatra + Puma + Nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viphat.me/1YrsGR8&quot;&gt;Sinatra + Puma + Nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/tong-hop-roda-web-toolkit</link>
        <guid isPermaLink="true">http://notes.viphat.work/tong-hop-roda-web-toolkit</guid>
        
        <category>ruby</category>
        
        <category>roda</category>
        
        
      </item>
    
      <item>
        <title>On Being a Junior Developer</title>
        <description>&lt;p&gt;Junior developer (for purposes of this post) is a developer with &amp;lt; 2 years experience programming in industry who have an interest in sharpening their technical skills.&lt;/p&gt;

&lt;h3 id=&quot;read-other-peoples-code&quot;&gt;1. Read other people’s code&lt;/h3&gt;

&lt;p&gt;Perhaps the best way to enhance your technical ability is to directly read other people’s code. &lt;a href=&quot;https://github.com&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt; is a fantastic resource; and it’s even better if you have an all star developer already within your work environment that you can bounce questions off of. Here are two things I think are particularly valuable:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus on naming conventions&lt;/strong&gt;; good programmers define variables with names that enhance the readability of the code and also provide intent, but also don’t couple the variable name to a certain data structure type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try to load the whole system into your head and understand it&lt;/strong&gt;. Notice how the various components are decoupled, design patterns, and also how they have spelled out their unit tests. Holding well designed systems in your head is very much like visualization within athletics. Visualizing yourself in a certain athletic situation or doing a specific technique correctly has been linked to improved performance. Do it for coding too.&lt;/p&gt;

&lt;h3 id=&quot;plan-things-out&quot;&gt;2. Plan things out&lt;/h3&gt;

&lt;p&gt;Before you ever start coding you should sit down with a whiteboard or pen and paper. These drawings don’t have to be complex, but should provide you with a holistic view to how all of the components you are about to code or touch should interact. In addition you should be exploring different design choices at this stage, it’s much easier to erase a whiteboard and start from scratch then be a week into your coding and realize what a mess things have become due to lack of planning.&lt;/p&gt;

&lt;h3 id=&quot;have-an-opinion&quot;&gt;3. Have an opinion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;As a junior developer you should have opinions and you should have reasons as to why you have that opinion&lt;/strong&gt;. Even asking yourself the question of “why did you make choice X?” as a thought experiment is a nice way to have a robust answer and solution to your problem. The reason you need to have opinions instead of simply following along is because you are literally learning into understanding. Ask yourself the tough questions so that when a senior developer reviews your code you have a legitimately robust solution.&lt;/p&gt;

&lt;h3 id=&quot;ask-questions&quot;&gt;4. Ask questions&lt;/h3&gt;

&lt;p&gt;Ask questions about peculiar things, there is often wisdom and learning to be had.&lt;/p&gt;

&lt;h3 id=&quot;explore-new-technologies&quot;&gt;5. Explore new technologies&lt;/h3&gt;

&lt;p&gt;When confronted with a situation they aren’t good at they often freeze up for fear of failure. As a junior developer it is in your best interest to fight those instincts and cast your net far and wide. Every piece of technology you touch influences you in some way, and having used various technologies exposes you to new paradigms and ways of doing things. &lt;strong&gt;Touching a new technology / programming language is expanding your ‘world view’ of programming&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;embrace-unit-testing&quot;&gt;6. Embrace unit testing&lt;/h3&gt;

&lt;p&gt;As a junior developer you really do need to embrace unit tests. I will advocate for Test Driven Development (TDD) not only because it improves my confidence that my code is functioning properly but has also really improved my function prototypes as I generally ‘call’ the function before its even built. I’m not particularly fond of BDD; however any form of testing you can do is better than nothing (trust me when it comes for v 1.1 of your app you’ll want those regression tests too).&lt;/p&gt;

&lt;h3 id=&quot;refactor&quot;&gt;7. Refactor&lt;/h3&gt;

&lt;p&gt;One of the problems of being a junior developer is that you haven’t been in industry long enough to be bitten by poorly written code that becomes impossible to maintain. Being a developer isn’t about writing code, it’s about producing working software while simultaneously hitting business goals and maintaining expectations. When you start with a blank slate everything is golden: you get to build from the ground up, features get spun out faster because they don’t interact with other parts of the system as much and the sky is the limit. If you are simply slinging code without any regard to maintainability, after about 6 months you will have accumulated a huge pile of technical debt. New features can’t get put out as fast, it takes longer to know what a certain function does and changing one thing wreaks havoc on another component of the system. Unfortunately the demand for new features from your users doesn’t simply decline with your technical debt; in fact it is likely increasing. This puts developers in a bad spot because they have a tangled pile of code and non technical folks requesting new features at rapid fire pace who have no idea what it means when you say ‘spaghetti code’.&lt;/p&gt;

&lt;p&gt;So what happens next? The developers say the old system is slow and everything would magically be better if only we could rewrite the thing from scratch. So new developers are brought on to maintain the old stack and your ‘best’ developers begin creating the system from scratch. Bottom line… this is a huge waste of resources and doesn’t work anyways (it always takes longer to rewrite than you think, the new stack is always trying to catch up with the old stack, lots of QA time, etc).&lt;/p&gt;

&lt;p&gt;But here’s the kicker, who wrote the initial version in the first place? &lt;strong&gt;Developers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The solution to this is preventative medicine. As a developer you should be constantly rewriting and refactoring your code. Don’t ever check in code that isn’t a little better off than before you started. Maintainable code is code that is easily readable, extendable, and testable by outside developers.&lt;/p&gt;

&lt;p&gt;Unless you have a very very good reason to put in that ‘quick fix’ don’t ever sacrifice a local maxima of productivity for the long term health of your codebase.&lt;/p&gt;

&lt;p&gt;Nguồn: &lt;a href=&quot;http://mattsencenbaugh.com/on-being-a-junior-developer/&quot;&gt;&lt;strong&gt;On being a Junior Developer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/on-being-a-junior-developer</link>
        <guid isPermaLink="true">http://notes.viphat.work/on-being-a-junior-developer</guid>
        
        <category>lap-trinh</category>
        
        
      </item>
    
      <item>
        <title>Cuộc sống là một trò chơi. Vậy đâu là chiến lược của bạn?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2x9vjoI.png&quot; alt=&quot;Press Start&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cuộc đời mỗi người đều giống như một trò chơi vậy, và dù muốn hay muốn thì bạn đã và đang tham dự trò chơi đó. Nhưng khác với những trò chơi mà bạn đã biết, Game of Life không có kẻ thắng, người thua, đối thủ của bạn là chính bản thân bạn. Và trò chơi nào rồi cũng sẽ đến hồi kết, người chiến thắng trò chơi cuộc sống là người biết cách vượt qua bản thân mình để mở khóa được nhiều thành tựu mà mình mong muốn. Khi bạn nắm được những quy tắc của trò chơi và có những chiến lược phù hợp thì bạn có nhiều khả năng giành chiến thắng trò chơi cuộc sống hơn và giúp bạn mở khóa được nhiều thành tựu hơn.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bạn có thể tìm đọc quyển &lt;a href=&quot;http://viphat.me/25GTvDf&quot;&gt;&lt;strong&gt;Chiến thắng trò chơi cuộc sống&lt;/strong&gt;&lt;/a&gt; - đây là một trong những quyển sách rất hay của Adam Khoo. Mình cảm thấy may mắn khi đọc được quyển đấy đúng thời điểm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;nn-tng&quot;&gt;Nền tảng&lt;/h3&gt;

&lt;p&gt;Có thể bạn không nhận ra, nhưng cuộc đời thực sự giống một trò chơi chiến thuật. Trong trò chơi lớn đó, sẽ có nhiều mini-game nhỏ hơn, như là dancing, driving, running và sex… Chìa khóa đơn giản để chiến thắng trò chơi này là quản lý nguồn tài nguyên và năng lượng của bạn. Quan trọng hơn hết, một người chơi thành công biết cách sử dụng hiệu quả thời gian của họ vào những việc đúng đắn. Tiền bạc, thành công sẽ tự kéo đến khi bạn kiểm soát được thời gian của mình đã trôi qua như thế nào.&lt;/p&gt;

&lt;h3 id=&quot;early-game&quot;&gt;Early-game&lt;/h3&gt;

&lt;p&gt;Trò chơi cuộc đời bắt đầu khi bạn được gán một nhân vật ngẫu nhiên và được đặt vào một hoàn cảnh cũng ngẫu nhiên mà bạn không được phép chọn lựa hay thay đổi.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mình không bàn đến thuyết luân hồi của Phật giáo nhé.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lw84h0N.png&quot; alt=&quot;Select your character&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Giai đoạn đầu đời mà cụ thể là 15 năm đầu tiên giống như một màn chơi hướng dẫn và làm quen với game. Hẳn bạn còn nhớ game chiến thuật bạn yêu thích bắt đầu như thế nào? Tuy nhiên, Game of Life lại không cho phép bạn bỏ qua giai đoạn này. (Vậy nên hãy tận hưởng, học hành chăm chỉ, sống trong yêu thương và khám phá thế giới xung quanh.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are born poor its not your mistake, But if you die poor its your mistake. - &lt;strong&gt;Bill Gates&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mid-game&quot;&gt;Mid-game&lt;/h3&gt;

&lt;p&gt;Khi đang là một người chơi trẻ tuổi, bạn sẽ rất nhiều thời gian và năng lượng, nhưng hầu như không có kinh nghiệm. Bạn sẽ nghiệm ra rằng, hầu hết mọi thứ - những công việc tốt nhất, tài sản và người bạn đời của bạn - đều đang bị khóa cho đến khi bạn đạt được.&lt;/p&gt;

&lt;p&gt;Đây chính là thời điểm mà bạn cần phải dồn lực để tăng cấp kỹ năng và cấp độ của bạn. Bởi vì, bạn sẽ không bao giờ có được nhiều thời gian và năng lượng như hiện tại lần nữa nếu để tuổi trẻ trôi qua.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;YOLO - You are only live once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ở giai đoạn mid-game, việc tối quan trọng của bạn là phải phân bổ và sử dụng thời gian càng hiệu quả càng tốt. Mỗi một thứ bạn thực hiện đều ảnh hưởng đến trạng thái và kỹ năng của bạn.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yHzVVNz.png&quot; alt=&quot;Skills&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nghe có vẻ đơn giản, nhưng vấn đề là bạn không biết được việc gì là đúng đắn cho bạn (Làm việc gì để tăng skill nào, và bạn có thật sự cần tăng skill đó hay không?). Còn cơ thể thì không phải lúc nào cũng vâng lệnh bạn. Tin tôi đi, luôn có nhiều thứ cám dỗ, nhiều vật cản xuất hiện khiến bạn mất kiểm soát cuộc đời mình mà nguyên nhân hầu hết đều bắt nguồn từ sức mạnh ý chí (willpower) của bạn.&lt;/p&gt;

&lt;p&gt;Vì vậy, chúng ta sẽ cùng phân tích 2 vấn đề ở phần tiếp theo nhé.&lt;/p&gt;

&lt;h4 id=&quot;lm-th-no--c-th-chin-thng-bn-thn&quot;&gt;Làm thế nào để có thể chiến thắng bản thân.&lt;/h4&gt;

&lt;p&gt;Nhiều người chơi nhận ra rằng khi họ chọn làm một việc nào đó - như đi đến phòng tập GYM thì y như rằng cơ thể của họ sẽ từ chối ý định đó hoàn toàn. Đây không phải là một bug của game, mỗi cơ thể đều có các thanh chỉ trạng thái (sức khỏe, năng lượng, sức mạnh ý chí…), và mặc dù bạn không thể nhận thấy chúng một cách trực tiếp nhưng chúng sẽ giống như hình minh họa:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DAm74dw.png&quot; alt=&quot;State&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Khi một trong các thanh trạng thái của bạn xuống thấp, cơ thể của bạn sẽ chống lại chỉ thị của bạn cho đến khi nhu cầu của nó được đáp ứng và các thanh tăng trở lại. Cố gắng học trong lúc bạn kiệt sức và đói bụng và bạn sẽ thấy sự tập trung của mình suy giảm nặng nề.&lt;/p&gt;

&lt;p&gt;Trong các thanh sức khỏe, năng lượng và sức mạnh ý chí thì &lt;strong&gt;sức mạnh ý chí&lt;/strong&gt; (&lt;strong&gt;willpower&lt;/strong&gt;) của bạn vô cùng quan trọng. Khi willpower của bạn đang thấp, bạn chỉ có thể làm thứ mà bạn thực sự muốn làm. Willpower sẽ giảm dần trong ngày và được bổ sung một ít bằng cách thư giãn, ăn uống và hồi phục bằng một giấc ngủ ngon buổi tối. Tuy vậy, Không hẳn là lúc nào willpower cũng hồi phục được 100% sau một giấc ngủ ngon. Điều này còn tùy vào willpower có bị lạm dụng quá mức trước đó hay không.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mình xin nhấn mạnh là ngủ ngon nhé, bởi không phải cứ ngủ đủ 6 đến 7 tiếng một ngày là bạn ngủ ngon và ngủ đúng cách. Xem thêm bài &lt;a href=&quot;http://notes.viphat.work/powerful-sleep&quot;&gt;&lt;strong&gt;Ngủ ít hơn, làm việc hiệu quả hơn&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mỗi quyết định của bạn đều tiêu hao willpower (Còn hành động thì tiêu hao energy). Trường hợp bạn quyết định phớt lờ một lựa chọn hấp dẫn bởi một lựa chọn kém hấp dẫn hơn thì mức độ tiêu hao willpower còn nhiều hơn. Ví dụ khi bạn chọn tập thể dục thay vì ngồi xem tivi thì bạn sẽ mất nhiều willpower hơn, nhưng vì tập thể dục thì tốt cho sức khỏe của bạn còn xem tivi thì có hại nên điều này đáng để đánh đổi.&lt;/p&gt;

&lt;p&gt;Một số thủ thuật để giữ hành vi của bạn đúng hướng:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Luôn giữ được các thanh chỉ trạng thái cao nhất có thể&lt;/strong&gt;: Khi bạn đói, mệt lã người hoặc tâm trạng buồn rầu, sức mạnh ý chí của bạn sẽ bị xuống dốc thê thảm. Hãy đảm bảo rằng bạn biết cách chăm sóc và yêu thương bản thân.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Đừng yêu cầu quá nhiều willpower trong một ngày&lt;/strong&gt;: sắp xếp công việc hợp lý - Chia nhỏ các công việc cần nhiều willpower thành nhiều ngày. Đồng thời, kết hợp chúng với các công việc cần ít willpower nhưng có thể hoàn thành ngay (hoàn thành và check complete một task trong to-do list có thể bổ sung cho bạn thêm một ít willpower và energy).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tham khảo thêm bài viết &lt;a href=&quot;http://notes.viphat.work/lam-chu-thoi-gian-lam-chu-cuoc-doi&quot;&gt;&lt;strong&gt;Làm chủ thời gian, làm chủ cuộc đời&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Cố gắng hoàn thành công việc quan trọng nhất trước tiên.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If it’s your job to eat a frog, it’s best to do it first thing in the morning. And if it’s your job to eat two frogs, it’s best to eat the biggest one first. - &lt;strong&gt;Mark Twain&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tham khảo thêm bài viết &lt;a href=&quot;http://notes.viphat.work/nguyen-tac-sap-xep-cong-viec&quot;&gt;&lt;strong&gt;Nguyên tắc sắp xếp ưu tiên công việc&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Giảm tiêu hao willpower bằng cách giảm số lựa chọn của bạn: Nếu bạn đang làm việc trên máy tính có thể truy cập Facebook, bạn sẽ dùng nhiều willpower hơn bởi vì bạn đang chọn thực hiện một việc khó (là tập trung làm việc) thay vì một việc dễ dàng và hấp dẫn hơn (lướt facebook). Hãy loại trừ những thứ có thể khiến bạn mất tập trung.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Mấu chốt để kiểm soát bản thân hiệu quả là phải biết cân bằng giữa các ưu tiên của bạn với trạng thái của cơ thể.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;lm-th-no--lm-ng-vic-hay-lm-vic-ng&quot;&gt;Làm thế nào để làm đúng việc (hay làm việc đúng)&lt;/h4&gt;

&lt;p&gt;Một trong những cái khó của trò chơi cuộc sống là làm đúng việc vào đúng thời điểm. Một số việc sẽ làm ảnh hưởng đến trạng thái cơ thể:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Bi28HdJ.png&quot; alt=&quot;Eating&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Một số việc khác giúp cải thiện kỹ năng của bạn:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9oB5XDY.png&quot; alt=&quot;Rocking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bạn cần dành thời gian, tài nguyên, năng lượng vào những việc có thể giúp bạn luôn giữ được trạng thái tốt - Ăn uống, nghỉ ngơi, ngủ… Những việc giúp bạn có được nguồn thu nhập như công việc mà công ty và sếp bạn đã giao cho. Sau đó bạn cần phải phát triển kỹ năng bằng cách tận dụng energy và willpower còn dư dả trong ngày. Sẽ tuyệt vời hơn nếu những việc mà bạn làm trong thời gian ở công ty cũng có tác dụng phát triển thêm kỹ năng mà bạn đang muốn trau dồi.&lt;/p&gt;

&lt;p&gt;Một vài kỹ năng sẽ quan trọng đối với bạn hơn là những kỹ năng còn lại. Bởi những kỹ năng tốt và phù hợp với Career Path sẽ giúp bạn tăng giá trị của mình, giúp bạn xây dựng thương hiệu cá nhân tốt và là nền tảng để đạt được nhiều thành tựu trong trò chơi cuộc sống:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/t5pzFrO.png&quot; alt=&quot;Skills&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Còn một số kỹ năng khác thì không thực sự hữu ích cho con đường của bạn:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/GxQUwf6.png&quot; alt=&quot;Bad Skills&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tương tự như cách phân phối điểm kỹ năng trong hầu hết các trò chơi nhập vai/chiến thuật: rèn luyện một bộ kỹ năng phù hợp sẽ hiệu quả hơn nhiều so với chỉ tập trung vào một kỹ năng cụ thể. Bởi vì rất khó để đạt đến trình độ hoàn hảo một kỹ năng, trên thực tế, điều này hầu như không thể. Sẽ dễ dàng hơn nếu bạn thành thạo một bộ kỹ năng cần thiết bởi khi kết hợp lại, chúng có thể giúp bạn mở ra một cánh cửa hoàn toàn mới.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KDxMvoH.png&quot; alt=&quot;Entrepreneur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/WYvt86Z.png&quot; alt=&quot;Ladies Magnet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ví dụ trong trường hợp này, nếu chỉ giỏi một kỹ năng duy nhất là tâm lý thì liệu nó có thể giúp bạn trở nên giàu có và hấp dẫn không? Tìm hiểu thử xem.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mi-trng-bn-ang-sng&quot;&gt;Môi trường bạn đang sống&lt;/h3&gt;

&lt;p&gt;Môi trường sẽ có những ảnh hưởng nhất định đến trạng thái của bạn cũng như các kỹ năng và cơ hội thăng tiến.&lt;/p&gt;

&lt;p&gt;Nhiều người chơi có khả năng chơi tốt trò chơi cuộc sống dù họ được vào đặt vào bất kỳ đâu. Nhưng sẽ dễ dàng hơn rất nhiều nếu bạn được đặt vào một số nơi nhất định, bạn sẽ có những ưu thế mà những nơi khác không có được. Nếu bạn là phụ nữ và đang ở một đất nước hà khắc với phụ nữ, bạn có thể sẽ không mở khóa được nhiều thành tựu trong trò chơi.&lt;/p&gt;

&lt;p&gt;Tuy bạn không được chọn nơi mình sinh ra nhưng hãy cân nhắc chuyển đến một nơi tốt hơn, có nhiều cơ hội thuận lợi để bạn phát triển kỹ năng và trình độ của bản thân.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Đọc thêm quyển &lt;strong&gt;Những kẻ xuất chúng&lt;/strong&gt; - &lt;strong&gt;Malcolm Gladwell&lt;/strong&gt;, tác giả sẽ chứng minh cho bạn thấy rằng xuất phát điểm của bạn, việc bạn sinh ra ở đâu, vào thời điểm nào đều có ảnh hưởng nhất định đến thành công sau này của bạn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tm-bn-i&quot;&gt;Tìm bạn đời&lt;/h3&gt;

&lt;p&gt;Sự thu hút là một trò chơi nhỏ nhưng không kém phần phức tạp, chúng là một màn chơi phụ của trò chơi cuộc đời mà bạn đang tham gia. Nếu bạn có trạng thái tốt và kỹ năng cao, tự bản thân bạn sẽ trở nên hấp dẫn hơn đối với người khác phái. Một người chơi mệt mỏi, cáu kỉnh và bất tài chắc chắn là không hấp dẫn và không được cân nhắc cho một mối quan hệ nghiêm túc và lâu dài.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/N5IICUU.png&quot; alt=&quot;Partner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trong trò chơi nhỏ này, việc từ chối và bị từ chối là rất phổ biến trong giai đoạn đầu của Mid-game. Điều vốn dĩ bình thường nhưng thật không may rằng nó có thể làm trạng thái tinh thần của bạn rớt thê thảm. Bởi không nhiều người chơi có thể đối diện với việc từ chối cũng như bị từ chối một cách thỏa đáng. Bạn sẽ cần phải tiêu hao nhiều willpower để vượt qua giai đoạn khó khăn, và willpower sẽ được bù đắp bằng những giấc ngủ dài. Vì vậy, điều tôi muốn nói là, hãy để thời gian giúp bạn xoa dịu những nỗi đau.&lt;/p&gt;

&lt;p&gt;Bí quyết để chiến thắng trong trò chơi nhỏ này là 80% những gì bạn cần tập trung vào, đó là tạo dựng và bồi đắp sự hấp dẫn từ bên trong bản thân bạn thay vì cố gắng theo đuổi một ai đó. Điều này cũng có nghĩa là hãy dành thời gian của bạn vào đúng nơi. Nếu bạn chăm chỉ tập thể dục, mở rộng các mối quan hệ, tâm hồn được nuôi dưỡng tốt còn sự nghiệp thì đang thăng tiến, các cô gái sẽ là người tìm đến bạn thay vì bạn đi tìm họ. 20% còn lại, chỉ đơn giản là bạn cần xuất hiện ở những nơi mà bạn có thể gặp được đúng đối tượng mình mong muốn. Hãy để những đối tượng tiềm năng có cơ hội được gặp bạn.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bạn có thể tham khảo khóa học &lt;strong&gt;Sức hút cá nhân&lt;/strong&gt; ở TGM hay quyển sách &lt;strong&gt;Những ngộ nhận về Sức hút cá nhân&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tin-bc&quot;&gt;Tiền bạc&lt;/h3&gt;

&lt;p&gt;Phần sau của trò chơi cuộc sống, bạn sẽ phải biết cách quản lý một tài nguyên mới, đó là đồng tiền của bạn. Hầu hết người chơi sẽ thấy tiền sẽ tăng lên trong suốt phần đầu của trò chơi, nhưng điều này chỉ gây thêm nhiều vấn đề hơn, chứ không phải ít hơn.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/uWJU8sA.png&quot; alt=&quot;Money&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Một nguyên tắc quan trọng nhất là không bao giờ vay tiền, trừ khi bạn có thể kiếm được nhiều tiền hơn từ việc vay mượn đó. Chẳng hạn, Mượn tiền để đầu tư vào việc học thì đáng giá (nhưng sẽ tốt hơn nếu bạn không phải vay mượn nhưng vẫn học được những kỹ năng mình còn kém, đọc bài &lt;a href=&quot;http://notes.viphat.work/hay-can-dam-len-hoi-cac-ban-huu&quot;&gt;&lt;strong&gt;Hãy can đảm lên hỡi các bạn hữu&lt;/strong&gt;&lt;/a&gt;), nhưng vay mượn để mua một đôi giày mới thì hoàn toàn không.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Phân biệt tài sản và tiêu sản - &lt;strong&gt;Rich Dad, Poor Dad&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tùy vào tham vọng tài chính của mình mà bạn chọn ra một chiến lược phù hợp:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;An toàn&lt;/strong&gt; - đơn giản là sống phù hợp với mức thu nhập của bạn, tiết kiệm một ít phòng cho những rủi ro không ngờ có thể xảy đến. Luôn nhớ là phải dành ra một khoảng ít nhất 10% thu nhập để tiết kiệm, nếu không đến một lúc nào đó, bạn sẽ phải hối tiếc đấy.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tìm hiểu thêm các kiến thức về tài chính cơ bản: &lt;a href=&quot;https://ubrand.cool/c/suc-manh-vo-bien-cua-lai-kep&quot;&gt;&lt;strong&gt;Sức mạnh vô biên của Lãi kép&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://notes.viphat.work/phuong-phap-quan-ly-tai-chinh-ca-nhan-jars&quot;&gt;&lt;strong&gt;Phương pháp quản lý tài chính JARS&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dư giả&lt;/strong&gt; - Chọn sự nghiệp và môi trường làm việc một cách cẩn thận, luôn chuẩn bị và luôn trong tình trạng sẵn sàng nắm bắt lấy khi cơ hội xuất hiện. Luôn không ngừng đầu tư thời gian và công sức vào việc trau dồi các kỹ năng của bản thân cho phù hợp với nhu cầu của thị trường. Hãy trở thành chuyên gia trong lĩnh vực của bạn, và bạn sẽ được đền đáp xứng đáng. Tuy vậy, phải biết cân bằng và tránh lạm dụng các thanh trạng thái của bạn hoặc bạn sẽ bị “thiêu đốt”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Giàu có&lt;/strong&gt; - Để đạt đến mức độ tài chính này thì bạn phải làm chủ doanh nghiệp của chính mình hoặc kết hợp với nhiều phương thức làm giàu khác bên cạnh việc làm thuê, bởi gần như không thể làm giàu bằng cách chỉ làm việc và xây dựng ước mơ cho người khác. Điểm mấu chốt để trở nên giàu có là sở hữu tài sản - thứ sẽ sản sinh ra nhiều hơn số tiền mà bạn đã đầu tư vào nó. Càng sở hữu nhiều tài sản thì càng nhiều tiền chảy vào túi bạn. Công ty của chính bạn là tài sản lớn nhất và đáng để bạn đầu tư nhất.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bạn phải kết hợp với nhiều kiểu làm giàu khác nếu muốn làm giàu bền vững bằng làm thuê. Tìm hiểu thêm về khóa &lt;strong&gt;Làm giàu bền vững&lt;/strong&gt; của &lt;strong&gt;TGM&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;late-game&quot;&gt;Late-Game&lt;/h3&gt;

&lt;p&gt;Nhiều lựa chọn của bạn sẽ phải thay đổi khi trò chơi cuộc sống tiếp tục tiến triển. Kết hôn và con cái sẽ làm giảm năng lượng và thời gian của bạn. Xuất hiện thêm nhiều nhiệm vụ mới trong trò chơi (thay tã cho con, chơi đùa cùng con chẳng hạn). Việc này khiến việc tập trung phát triển bản thân của bạn gặp nhiều trở ngại.&lt;/p&gt;

&lt;p&gt;Người chơi lớn tuổi hơn thường có nhiều kỹ năng, tài nguyên và kinh nghiệm hơn và có thể hoàn thành được nhiều nhiệm vụ mà trước đây dường như không thể như “sở hữu một ngôi nhà” hay “viết một quyển sách bán chạy”…&lt;/p&gt;

&lt;p&gt;Trò chơi cuộc sống sẽ kết thúc sau 29000 ngày hoặc 80 năm. Nếu trạng thái và kỹ năng của bạn tương đối tốt, cuộc sống của bạn có thể sẽ kéo dài thêm ít lâu nữa. Nhưng sẽ không tồn tại những mã cheat code đặc biệt để kéo dài cuộc sống của bạn.&lt;/p&gt;

&lt;p&gt;Vào thời điểm bắt đầu trò chơi, bạn không được quyền chọn bạn là ai và hoàn cảnh của bạn. Và điều này lại một lần nữa được lặp lại vào cuối game. Những quyết định và hành động của bạn trong quá khứ sẽ định hình việc bạn kết thúc cuộc chơi này như thế nào. Do vậy vào những ngày cuối cùng của bạn, không nhiều thứ bạn có thể làm để thay đổi tình hình nữa rồi.&lt;/p&gt;

&lt;p&gt;Đó là lý do tại sao chiến lược của bạn là quan trọng để có thể chiến thắng trò chơi cuộc sống. Cách bạn chơi ở giai đoạn mid-game (20s, 30s) sẽ quyết định cuộc đời của bạn.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tuổi 20 - những năm tháng quyết định cuộc đời bạn&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Và bây giờ, đừng do dự nữa, hãy tham gia 100% vào trò chơi cuộc sống.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/6zv8U6S.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bài viết này được lược dịch từ nguồn &lt;a href=&quot;http://oliveremberton.com/2014/life-is-a-game-this-is-your-strategy-guide/&quot;&gt;&lt;strong&gt;Life is a game. This is your strategy guide&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/life-is-a-game</link>
        <guid isPermaLink="true">http://notes.viphat.work/life-is-a-game</guid>
        
        <category>bai-hoc-cuoc-song</category>
        
        
      </item>
    
      <item>
        <title>Sử dụng Git blame hiệu quả hơn</title>
        <description>&lt;p&gt;#TIL - Đây là bài học học được hôm nay: Đồng nghiệp phát hiện một bug nghiêm trọng làm lộ thông tin cá nhân của Users, mình phải sử dụng &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; để xác định ai là người gây ra lỗi, tuy nhiên trong trường hợp này, &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; đã không chính xác vì nghĩ là bạn H là author của dòng code này, nhưng thực sự thì bạn H chỉ xóa bớt khoảng trắng, thêm dấu phẩy mà thôi. Sau khi trace tiếp thì phát hiện original author của dòng code đó là mình (vào khoảng 6 tháng trước).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TL;DR &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; hiếm khi cho bạn kết quả hữu ích. Thay vào đó có thể sử dụng các options trên &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; để tìm đúng tác giả, người chịu trách nhiệm cho sự thay đổi không mong đợi.&lt;/p&gt;

&lt;h3 id=&quot;git-blame-hot-ng-nh-th-no&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; hoạt động như thế nào&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; tìm kiếm lịch sử commit để tìm người cuối cùng chỉnh sửa dòng code. Một số Editors có tích hợp chức năng này vào công cụ của họ, cũng như Github, Gitlab hay Bitbucket… cũng đều có &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; ngay trong giao diện (rất dễ để theo dõi và truy vết). Tuy vậy, bạn cũng có thể dùng command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git blame path/to/file

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Output của &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; trên command-line&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;e45ad3 (Tim 2016-01-01)      1) import x from y;
8890d2 (Jeremy 2016-01-13)   2) import z from h;
e73ab4 (Michelle 2015-12-26) 3) public static func main(){
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output của &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; trên &lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7DUGSmo.png&quot; alt=&quot;Bitbucket Git Blame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Cá nhân mình thì cảm thấy nhìn trên GUI sẽ trực quan  và dễ dàng hơn.)&lt;/p&gt;

&lt;p&gt;Ngoài ra, Bạn có thể cải thiện &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; bằng cách truyền options nhắc &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; ignore whitespaces cũng như detect moved code bằng:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git blame -w -M
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;vy-c-g-khng-n-vi-git-blame&quot;&gt;Vậy có gì không ổn với &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Vấn đề là &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; chỉ thể hiện người cuối cùng chỉnh sửa dòng code. Và điều này không chắc là thứ bạn muốn xác định, &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; không hẳn chỉ ra đúng người chủ thực sự của dòng đó bởi vì rơi vào những trường hợp sau, &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; vẫn xem đó là author của dòng code đó:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thay đổi identing và formatting của dòng code.&lt;/li&gt;
  &lt;li&gt;Di chuyển code bên trong file.&lt;/li&gt;
  &lt;li&gt;Đổi tên file.&lt;/li&gt;
  &lt;li&gt;Nhưng thay đổi không đáng kể như thêm/bớt khoảng trắng…&lt;/li&gt;
  &lt;li&gt;Di chuyển file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gii-php---s-dng-git-log&quot;&gt;Giải pháp - sử dụng &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; là công cụ rất đa năng, trong trường hợp này, bạn có thể tận dụng &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; để chỉ ra original author của dòng code bạn muốn tìm:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log -p -M --follow --stat -- path/to/your/file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;: General command to show multiple commits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;: Show patches, as in show what actually changed for each commit.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-M&lt;/code&gt;: Show file renames in a readable way. Ví dụ:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;path/to/{oldName.css =&amp;gt; newName.css}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--follow&lt;/code&gt;: If file is renamed, this will keep following changes through the old file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--stat&lt;/code&gt;:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-- path/to/file&lt;/code&gt;: specify a single file&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kết quả:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NRAlPiJ.png&quot; alt=&quot;Git Log&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/a-better-git-blame</link>
        <guid isPermaLink="true">http://notes.viphat.work/a-better-git-blame</guid>
        
        <category>git</category>
        
        <category>lap-trinh</category>
        
        <category>til</category>
        
        
      </item>
    
      <item>
        <title>Phương pháp học tích cực</title>
        <description>&lt;h3 id=&quot;phng-php-hc-tch-cc-l-g&quot;&gt;Phương pháp học tích cực là gì?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Phương pháp học tích cực&lt;/strong&gt; - “&lt;a href=&quot;http://notes.viphat.work/hoc-lap-trinh-tu-sai-lam&quot;&gt;&lt;strong&gt;học qua hành&lt;/strong&gt;&lt;/a&gt;” - nhấn mạnh quá trình học tập và tiếp thu chứ không chú trọng vào kết quả, giúp cho người học phát triển khả năng tư duy độc lập, kỹ năng tự học và kỹ năng giải quyết vấn đề. Phương pháp này tập trung vào việc khuyến khích và động viên người học tự giác tìm kiếm từ nhiều nguồn thông tin, học bằng cách đọc, tự mình tổ chức, xử lý và tổng hợp thông tin thay vì lệ thuộc vào các bài giảng của giáo viên. Phương pháp học tích cực đòi hỏi người học phải có thái độ “tích cực”, tham gia vào các hoạt động như giải thích điều đã học dựa trên quan điểm riêng của người học, chia sẻ ý kiến cá nhân, trao đổi, tranh luận, phân tích, suy luận và ứng dụng thực tế nhằm tích lũy thêm nhiều tri thức cũng như kỹ năng cần thiết để nâng cao năng lực giải quyết vấn đề…&lt;/p&gt;

&lt;h3 id=&quot;mt-s-phng-php-hc-tch-cc&quot;&gt;Một số phương pháp học tích cực&lt;/h3&gt;

&lt;p&gt;Phương pháp học tích cực đòi hỏi người học &lt;strong&gt;chịu trách nhiệm về việc học của chính mình&lt;/strong&gt;. Vì vậy, việc xây dựng thói quen học tốt và biết cách quản lý thời gian hiệu quả sẽ giúp bạn thích nghi tốt với phương pháp học tích cực (&lt;strong&gt;Active Learning&lt;/strong&gt;) này. Một số phương pháp có thể áp dụng:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Học bằng cách đọc&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Học bằng cách viết tay&lt;/strong&gt; - Việc ghi chú bằng tay giúp cải thiện khả năng tiếp thu. (Đối với việc ghi chú bằng máy tính / máy tính bảng thì ghi chú bằng viết tay cũng hiệu quả hơn - &lt;a href=&quot;http://www.scientificamerican.com/article/a-learning-secret-don-t-take-notes-with-a-laptop/&quot;&gt;&lt;strong&gt;Don’t take notes with a laptop&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Học theo nhóm&lt;/strong&gt;: Thảo luận giúp người học rèn luyện tư duy phản biện và học cách trao đổi, trình bày quan điểm của bản thân trước nhiều người. Đồng thời tạo thêm hứng thú và giúp người học tham gia tích cực hơn, học được nhiều hơn thay vì thụ động ngồi nghe giảng hay đọc sách.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Đôi bạn cùng tiến&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tranh luận&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Học bằng cách đặt câu hỏi&lt;/strong&gt;: 5W 1H - (Who, What, Where, When, Why), (How)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Làm bài tập&lt;/strong&gt;  - Học cách giải quyết vấn đề, áp dụng lý thuyết vào thực tế.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Học từ thất bại&lt;/strong&gt; - Để cảm giác thất bại hủy hoại bản thân hay biến chúng thành động lực vượt qua thử thách chính là chọn lựa của riêng bạn.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hnh-thnh-cc-thi-quen-hc-tp-tt&quot;&gt;Hình thành các thói quen học tập tốt&lt;/h3&gt;

&lt;p&gt;Rũ bỏ suy nghĩ “&lt;strong&gt;Học nghĩa là mở sách/tài liệu ra rồi đọc, sau đó cố gắng ghi nhớ nội dung&lt;/strong&gt;” - Một số người đọc sách nhưng tâm trí không tập trung vào nội dung quyển sách mình đang đọc, số khác lại chịu ảnh hưởng của các vật dụng công nghệ cao. Nhiều người chỉ đọc vài phút liền rơi vào giấc ngủ. Để có thể cải thiện kỹ năng đọc và hiệu quả học, bạn cần loại bỏ mọi thứ có thể khiến bạn xao nhãng và ngắt quãng quá trình học của mình. Đây là vài lời khuyên ngắm giúp bạn học tốt hơn:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Có khu vực dành riêng cho học tập&lt;/strong&gt; - Nếu không có không gian riêng tại nhà, hãy tìm đến thư viện hoặc những nơi vắng vẻ, yên tĩnh. Đừng cho phép bản thân mình chú ý tới bất kỳ cái gì khác ngoài việc học.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lên kế hoạch và đặt mục tiêu cho từng lần học&lt;/strong&gt; - Việc đề ra các mục tiêu và gạch bỏ chúng sau khi hoàn thành sẽ giúp bạn cảm nhận được kết quả của sự nỗ lực.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ghi chú những điều quan trọng cần phải nhớ&lt;/strong&gt; vào một quyển sổ và thường xuyên mang sổ theo bên người. Bởi vì cố gắng ghi nhớ không phải là một lựa chọn khôn ngoan.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nghỉ ngơi đều đặn để giữ cho tâm trí luôn minh mẫn và tỉnh táo&lt;/strong&gt; - Bạn không cần phải học mọi lúc, bạn cần học hiệu quả. Vì vậy hãy dành ra khoảng thời gian nghỉ ngơi chất lượng, giúp thư giãn và điều tiết mắt.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;k-nng-c&quot;&gt;Kỹ năng đọc&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Kỹ năng đọc&lt;/strong&gt; rất quan trọng đối với sự học. Bạn cần ý thức và chủ động phát triển thói quen đọc tốt mới có thể tiến xa trên con đường tự học. Trước khi đọc một chương trong sách, bạn cần xem kỹ mục lục để nắm bắt ý tưởng và kết cấu của cuốn sách. Sau khi đọc xong mỗi đoạn, hãy tạm ngừng một chút và tự hỏi bản thân ý chính của đoạn văn này là gì, tóm tắt ý chính rồi ghi chú vào sổ tay riêng (sổ thông thái). Với những quyển sách có các sơ đồ và biểu đồ, bạn cần đảm bảo rằng bạn hiểu rõ chúng. Khi đọc, đừng cố dịch từng từ vì nếu bạn là như vậy thì bạn sẽ bỏ lỡ ý chính của cả đoạn văn. Ban đầu, bạn nên đọc lướt cả đoạn để nắm lấy ý chung. Sau đó, hãy đọc lại một lần nữa. Nghĩa văn bản sẽ trở nên rõ ràng hơn khi bạn đã nắm được ý chính. Nếu lúc này bạn vẫn không hiểu thì hãy dùng từ điển để kiểm tra nghĩa của một số từ quan trọng.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Học mà không hiểu, không biết cách thực hành điều bạn đã học. Không phải là học. Ghi nhớ không phải là học.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Bài tập&lt;/strong&gt; (tuy có vẻ không liên quan đến chủ đề của bài viết lắm nhưng bài tập này là để trả lời cho câu hỏi - &lt;strong&gt;mục đích của sự học&lt;/strong&gt; (của bạn) là gì?)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mục tiêu nghề nghiệp của bạn là gì? Ngắn hạn, dài hạn? 2 năm tới, 5 năm tới, 10 năm tới? Cụ thể?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– Trích từ quyển &lt;strong&gt;Khởi hành - Lời khuyên sinh viên Việt Nam&lt;/strong&gt; - &lt;strong&gt;Giáo sư John Vũ&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/active-learning</link>
        <guid isPermaLink="true">http://notes.viphat.work/active-learning</guid>
        
        <category>active-learning</category>
        
        
      </item>
    
      <item>
        <title>Tai nạn với Rails và Redis</title>
        <description>&lt;p&gt;#HọcTừSaiLầm - Mình vừa mắc phải một sai lầm mà mãi đến mấy tháng sau mới phát hiện ra. Vì vậy sai lầm này đã phải trả giá bằng tiền bạc (cứ scale server redis mà vẫn bị hết memory), Web App thì bị downtime vài lần, hơi muộn nhưng đã ngộ ra được.&lt;/p&gt;

&lt;p&gt;Cụ thể là mình có dùng &lt;strong&gt;redis&lt;/strong&gt; làm session_store của Rails:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;session_store&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:redis_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;servers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;REDIS_URL&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/1/sessions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nhưng khi đó lại mình quên mất vụ &lt;code class=&quot;highlighter-rouge&quot;&gt;expires_in&lt;/code&gt; nên cuối cùng Rails set default là unlimited. Session Keys cứ thế lưu trữ dài hạn trên Redis, và cứ âm thầm ngốn hết Ram của Instance Redis, mình đã thử nâng lần lượt 1GB lên 2GB, rồi 4GB và 8GB nhưng sau một thời gian vẫn cứ ngốn sạch trơn Ram, trong khi kiểm tra số lượng Redis keys mà App dùng thì chỉ khoảng 100k. Cuối cùng, vô tình kiểm tra ở database 1 (Redis đánh số database, mặc định là 0) thì choáng, số lượng lên tới hơn 50 triệu keys đang dùng làm sessions.&lt;/p&gt;

&lt;p&gt;Giải quyết nhanh bằng cách flushdb để xóa toàn bộ data từ một database cụ thể. (May là mình đã tách riêng sessions ra một database khác nên flushdb không thương tiếc, users đang đăng nhập sẽ bị đá ra khỏi hệ thống.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis-cli
SELECT dbnum
flushdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Lệnh flushall để xóa toàn bộ databases của Redis&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Học được từ sai lầm này&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Rails không set expires mặc định cho session_store nhé, liệu mà nhớ thêm vào.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hiểu hơn về Redis - học được vài chiêu Optimize Memory Usage của Redis (Tham khảo &lt;a href=&quot;http://redis.io/topics/memory-optimization&quot;&gt;&lt;strong&gt;Redis Memory Optimization&lt;/strong&gt;&lt;/a&gt;): Sử dụng hash-zipmap - use hashes when possible thay cho cặp key-value đơn lẻ (Việc dùng small hashes rất tối ưu cho việc sử dụng Memory nhưng đánh đổi bằng CPU Usage sẽ cao hơn).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Redis memory footprint:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;An empty instance uses ~ 1MB of memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;1 Million small Keys -&amp;gt; String Value pairs use ~ 100MB of memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;1 Million Keys -&amp;gt; Hash value, representing an object with 5 fields, use ~ 200 MB of memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Biết được các công nghệ có thể dùng để thay thế redis trong tương lại: &lt;a href=&quot;http://fallabs.com/kyototycoon/&quot;&gt;&lt;strong&gt;Kyoto Tycoon&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://www.aerospike.com/&quot;&gt;&lt;strong&gt;AeroSpike&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Khả năng Monitoring Server của mình còn quá kém, thiếu sự nhạy cảm và chịu khó của một SysAdmin.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/tai-nan-voi-rails-va-redis</link>
        <guid isPermaLink="true">http://notes.viphat.work/tai-nan-voi-rails-va-redis</guid>
        
        <category>lap-trinh</category>
        
        <category>redis</category>
        
        <category>til</category>
        
        <category>learn-from-mistake</category>
        
        <category>ruby-on-rails</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>Học Lập trình từ sai lầm</title>
        <description>&lt;p&gt;&lt;strong&gt;Trích từ Facebook của Giáo sư John Vũ&lt;/strong&gt; - Mình đăng lại để dùng làm tài liệu tham khảo về sau khi mình có dự định đi dạy lập trình cho trẻ em sau tuổi 40.&lt;/p&gt;

&lt;p&gt;Bị ấn tượng bởi công nghệ sau khi tham dự khóa &lt;strong&gt;Làm Giàu Bền Vững&lt;/strong&gt; của anh Trần Đăng Khoa tại TGM nên mình cũng Không chắc là với sự tiến bộ của công nghệ AI thì nghề Lập trình còn tồn tại ở thời điểm đó không? - Đọc bài báo &lt;a href=&quot;http://www.wired.com/2016/05/the-end-of-code/&quot;&gt;&lt;strong&gt;The End of Code&lt;/strong&gt;&lt;/a&gt; mà giựt mình, bạn sẽ không cần viết code để sai bảo máy tính làm việc nữa, bạn sẽ huấn luyện chúng như một chú chó.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;viphat&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Nhiều sinh viên ghi danh học Công Nghệ Thông Tin nhưng không học tốt trong lớp lập trình rồi bỏ cuộc. Đa số cho lập trình là khó do đó điều quan trọng của các giáo sư dạy lập trình là làm sao xoá bỏ nỗi sợ lập trình của sinh viên để họ có thể phát triển kĩ năng này. Sau đây là một phương pháp đơn giản mà tôi đã áp dụng trong lớp lập trình tại Carnegie Mellon.&lt;/p&gt;

&lt;p&gt;Vào đầu môn học, tôi nói với sinh viên rằng tôi sẽ không chấm điểm ba chương trình (Program) đầu tiên. Điều đó có nghĩa là họ có thể phạm sai lầm và không phải lo lắng về chương trình của họ có chạy hay không. Điều đó làm giảm bớt cảm giác căng thẳng của sinh viên về việc học lập trình. Điều tôi muốn là khuyến khích họ làm quen với máy tính, làm quen với việc viết mã. Mặc dầu những chương trình này không được cho điểm nhưng sinh viên phải nhận diện sai lầm mà họ phạm để cho tôi có thể sửa trong lớp và giải thích tại sao chương trình của họ không làm việc.&lt;/p&gt;

&lt;p&gt;Trong ba chương trình tiếp, thay vì sửa sai lầm của họ, tôi cho họ xem những chương trình mẫu viết sẵn trên bảng và yêu cầu sinh viên sửa sai lầm của họ. Họ kiểm lại chương trình của mình, từng dòng một để tìm ra các sai lầm. Sau đó tôi kiểm soát lại rồi thảo luận về các sai lầm chung trong các chương trình này. Trong chương trình thứ nhất, phần lớn sinh viên đều có khả năng sửa được lỗi cú pháp của họ, một số có khả năng tìm ra sai lầm trong logic của họ. Nhưng ở chương trình thứ hai và thứ ba, it ai nhận ra vấn đề mà họ đã phạm phải, do đó tôi thường hướng dẫn cả lớp thảo luận để tìm ra những lỗi lầm mà đa số đều phạm, nhờ thế mà sinh viên bắt đầu hiểu tại sao chương trình của họ không làm việc. Nói cách khác, &lt;strong&gt;họ học từ sai lầm của họ&lt;/strong&gt;. Tôi cũng cho lớp biết rằng ba chương trình sau sẽ không được cho điểm, để xả bớt sức ép nhưng từ giờ trở đi, nếu họ phạm cùng sai lầm lần nữa trong chương trình của họ, nó sẽ bị cho điểm xấu và anh hưởng đến kỳ thi cuối khóa.&lt;/p&gt;

&lt;p&gt;Khi lớp tiếp tục, phần lớn sinh viên học cách nhận ra sai lầm riêng của mình và có khả năng sửa chúng. Qua thời gian, ít người phạm sai lầm và họ trở nên tự tin hơn khi kĩ năng lập trình của họ cải tiến. Vào lúc này, phần lớn sinh viên phát triển được khả năng viết mã nên tôi cho sinh viên kiểm chương trình lẫn nhau để họ học thêm về cấu trúc từ cách nhìn của người khác. Phần lớn sinh viên hiểu rằng bằng việc kiểm chương trình của bạn cùng lớp, họ có thể cải tiến kĩ năng viết mã riêng của họ.&lt;/p&gt;

&lt;p&gt;Khi sinh viên cảm thấy thoải mái về lập trình, tôi tiếp tục xây dựng niềm tin của họ bằng việc cho các bài tập “Mini-hackathon” hàng tuần nơi họ phải giải quyết những vấn đề, từ dễ đến khó, bằng ngôn ngữ lập trình (xấp xỉ 100 tới 250 dòng mã) trong vòng nửa giờ. Bất kì ai kết thúc đầu tiên với kết quả đúng sẽ được thưởng. Kiểu thi đua này khuyến khích họ phát triển kĩ năng lập trình tốt hơn vì họ phải viết mã nhanh trong một thời gian cố định.&lt;/p&gt;

&lt;p&gt;Từ những buổi thi đua ngắn hạn này, tôi có thể quan sát cách sinh viên làm việc. Một số dường như không thoải mái là họ có thể hoàn thành đúng thời gian đã phân, nhưng hoài nghi của họ nhanh chóng thay đổi khi họ ít tập trung vào thời gian và nhiều hơn vào kết quả. Sinh viên hài lòng nhất là những người nghĩ rằng họ không thể viết mã được nhưng rốt cuộc lại tìm ra được những thuật toán phức tạp hơn họ nghĩ và lập trình trôi chảy.&lt;/p&gt;

&lt;p&gt;Sau năm hay sáu tuần, phần lớn sinh viên nói với tôi rằng viết mã đã trở thành thói quen tự nhiên như họ viết tiếng Anh. Họ thậm chí không nghĩ về cú pháp hay qui tắc thêm nữa.&lt;/p&gt;

&lt;p&gt;Một sinh viên giải thích: “Bây giờ em thực sự biết về phương pháp tích cực của “&lt;strong&gt;Học qua hành&lt;/strong&gt;” nghĩa là gì. Đầu tiên em học làm những điều căn bản thật dễ rồi chuyển qua các cấu trúc xem chương trình làm việc ra sao. Em học cái gì làm việc và cái gì không rồi áp dụng qui tắc để sửa các lỗi lầm của em. Đột nhiên nó trở thành một thói quen và khả năng viết mã của em phát triển.”&lt;/p&gt;

&lt;p&gt;Tôi đã áp dụng phương pháp này trong nhiều lớp lập trình, bất kể đó là Java, C++ hay Python. &lt;strong&gt;Khi sinh viên không bị căng thẳng, lo lắng vì sự thất bại, họ tập trung nhiều hơn vào học tập. Khi sinh viên học từ sai lầm của họ, họ sẽ học tốt. Khi sinh viên được cho nhiều cơ hội hơn để thực hành, họ sẽ phát triển các kĩ năng của họ. Khi họ có kĩ năng, họ sẽ cảm thấy an ổn hơn và tin vào năng lực của họ&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;“&lt;strong&gt;Học qua hành&lt;/strong&gt;” là việc cho sinh viên cơ hội để học theo sự tiến bộ cá nhân và thời gian. Là giáo sư, chúng ta phải tạo cơ hội và môi trường thích hợp để cho sinh viên phát triển kĩ năng của họ và họ chỉ học tốt nếu họ không sợ hãi.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Mọi người có thể follow Blog của Giáo sư tại đây:   &lt;a href=&quot;http://science-technology.vn&quot;&gt;&lt;strong&gt;science-technology.vn&lt;/strong&gt;&lt;/a&gt;. Giáo sư là người dịch và phóng tác quyển &lt;strong&gt;Hành trình về phương đông&lt;/strong&gt; nổi tiếng. Đọc thêm thông tin về giáo sư tại đây - &lt;a href=&quot;http://viphat.me/27YnKaE&quot;&gt;Giáo sư JOHN VŨ- Niềm tự hào của người Việt Nam.bao&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
        <link>http://notes.viphat.work/hoc-lap-trinh-tu-sai-lam</link>
        <guid isPermaLink="true">http://notes.viphat.work/hoc-lap-trinh-tu-sai-lam</guid>
        
        <category>lap-trinh</category>
        
        
      </item>
    
      <item>
        <title>Coder vs Programmer vs Developer vs Hacker vs Computer Scientist ?</title>
        <description>&lt;p&gt;Bài viết đăng lại từ Facebook của anh Nguyễn Hồng Phúc (xnohat), tuy ngắn nhưng thể hiện rất đúng bản chất. Ngoài ra các bạn còn có thể tham khảo thêm bài viết &lt;a href=&quot;http://notes.viphat.work/career-path-cho-developer&quot;&gt;&lt;strong&gt;Career Path cho Developer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Coder&lt;/strong&gt; - Thợ code, khi được giao việc code một chương trình nào đó thường cần phải kèm theo một bản mô tả chi tiết chương trình, rất thạo việc viết mã, viết nhanh và làm cho chương trình chạy đúng như mô tả, nhưng hầu hết trường hợp là sản phẩm không gọn gàng lắm nếu nhìn vô code. Chấm hết đừng đòi hỏi nhiều hơn nữa ở họ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programmer&lt;/strong&gt; - Viết code, am hiểu các thuật toán, tập trung chuyên sâu ở một số hệ thống và ngôn ngữ lập trình, với các kỹ sư này thì chỉ cần nói rõ với anh ta tên chương trình và nói ngắn gọn chương trình đó làm gì, phần còn lại anh ta lo được.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt; - Có tầm nhìn khái quát vấn đề, có khả năng sử dụng nhiều hệ thống khác nhau, nhiều ngôn ngữ lập trình, phối hợp chúng với nhau để giải quyết vấn đề. Những người này thường không chỉ làm việc chỉ với code mà cả với con người, thường là giao tiếp tốt, tiếp nhận vấn đề, phân tích và xây dựng giải pháp, rồi anh ta sẽ đưa ra thiết kế của các chương trình, cũng như cung cấp các mô tả chi tiết cho programmer và coder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hacker&lt;/strong&gt; - những gã này thực sự khá lập dị ở một góc độ nào đó, có những kỹ năng chuyên môn rất xuất sắc, am hiểu rất chi tiết ở một số phân ngành nhất định, thường thì sự am hiểu này ở mức sâu đến đáng sợ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Computer Scientist&lt;/strong&gt; - Hầu như làm việc ở mức độ lý thuyết, đưa ra các thuật toán hiệu quả, viết sách và bán cho đám coder, programmer, developer, hacker đọc. Họ làm việc với toán nhiều hơn là với code.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 00:05:00 +0000</pubDate>
        <link>http://notes.viphat.work/coder-programmer-developer-hacker-computer-scientist</link>
        <guid isPermaLink="true">http://notes.viphat.work/coder-programmer-developer-hacker-computer-scientist</guid>
        
        <category>kinh-nghiem-lap-trinh</category>
        
        
      </item>
    
      <item>
        <title>[TIL] Paperclip Fingerprint</title>
        <description>&lt;h3 id=&quot;paperclip-fingerprint&quot;&gt;Paperclip Fingerprint&lt;/h3&gt;

&lt;p&gt;Tình huống của hôm nay là Sếp bỗng dưng muốn chuyển tất cả assets của ứng dụng từ &lt;strong&gt;Amazon S3&lt;/strong&gt; về &lt;strong&gt;VCCloud CDN&lt;/strong&gt; (đang khuyến mãi gói 100 GB miễn phí, giá tính ra không đắt hơn Amazon S3 nhiều lắm và được khoản Servers đặt ở Hà Nội - Đà Nẵng - Hồ Chí Minh nên thích hợp cho App có lượng lớn truy cập từ VN.)&lt;/p&gt;

&lt;p&gt;Sử dụng CDN của VCCloud cũng đơn giản, chẳng phải setup nhiều, chỉ add domain của S3 Bucket vào là chạy được ngay (Enable Static Web Hosting cho Bucket S3 để có sub-domain riêng). Nhưng đẻ ra một vấn đề là trước đây, dùng Paperclip để upload users’s file lên S3 mà không có fingerprint, giờ mà dùng CDN thì hỏng bét, nếu file ở S3 có thay đổi thì CDN vẫn serve file cũ. »&amp;gt; Enable Fingerprint vào tên file cho Paperclip&lt;/p&gt;

&lt;p&gt;1 . Tạo &lt;em&gt;Migration&lt;/em&gt;  cho tất cả các cột có sử dụng Paperclip handle attachment&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AddAvatarFingerPrintToUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:avatar_fingerprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2 . Thêm Fingerprint vào tên file (đây là ví dụ cho trường hợp của mình)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/paperclip.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Paperclip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;:class/:attachment/:id_:style_:fingerprint.:extension&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Xong bước này thì tất cả file mới upload sau này đều có fingerprint.&lt;/p&gt;

&lt;p&gt;3 . Xử lý file đã upload trước đây bằng cách chạy rake sau:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paperclip&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:refresh&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CLASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3b . Nếu không muốn chạy Rake trên thì có thể xử lý thủ công bằng:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;users_to_reprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reprocess!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;viphat@13-05-2016&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 15:52:26 +0000</pubDate>
        <link>http://notes.viphat.work/paperclip-fingerprint</link>
        <guid isPermaLink="true">http://notes.viphat.work/paperclip-fingerprint</guid>
        
        <category>ruby-on-rails</category>
        
        <category>til</category>
        
        
      </item>
    
  </channel>
</rss>
